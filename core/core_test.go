package core

import (
	"log"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestCore(t *testing.T) {
	assert := assert.New(t)

	Init()
	const sRate = 44100
	InitAudio(1, 2, sRate)

	inbuf := make([]float32, 64)   // one input channel, two output channels
	outbuf := make([]float32, 128) // block size 64, one tick per buffer

	SetNoteOnHook(func(ch, pitch, vel int32) {
		log.Printf("[note on] ch=%d pitch=%d vel=%d", ch, pitch, vel)
	})

	// compute audio    [; pd dsp 1(
	StartMessage(1)
	AddFloat(1.0)
	FinishMessage("pd\x00", "dsp\x00")

	// open patch       [; pd open file folder(
	OpenFile("test.pd\x00", "testdata\x00")

	// now run pd for ten seconds (logical time)
	for i := 0; i < 10*sRate/64; i++ {
		// fill inbuf here
		ProcessFloat(1, inbuf, outbuf)
		// use outbuf here
	}
	assert.EqualValues(expCore, outbuf)
}

var expCore = []float32{
	0.9371085, 0.9371085, 0.9156956, 0.9156956, 0.89131993,
	0.89131993, 0.8640647, 0.8640647, 0.83397603, 0.83397603, 0.80119574,
	0.80119574, 0.7658189, 0.7658189, 0.72793865, 0.72793865, 0.6877089, 0.6877089,
	0.6452433, 0.6452433, 0.6006753, 0.6006753, 0.55416834, 0.55416834, 0.5058538,
	0.5058538, 0.45589635, 0.45589635, 0.4044669, 0.4044669, 0.35171416, 0.35171416,
	0.29782322, 0.29782322, 0.24296999, 0.24296999, 0.1873195, 0.1873195,
	0.13106525, 0.13106525, 0.07438579, 0.07438579, 0.017463204, 0.017463204,
	-0.03951525, -0.03951525, -0.09636599, -0.09636599, -0.15290204, -0.15290204,
	-0.20894447, -0.20894447, -0.26430652, -0.26430652, -0.3188087, -0.3188087,
	-0.3722822, -0.3722822, -0.424539, -0.424539, -0.4754193, -0.4754193,
	-0.52476573, -0.52476573, -0.57239145, -0.57239145, -0.61816734, -0.61816734,
	-0.6619437, -0.6619437, -0.70355284, -0.70355284, -0.7428905, -0.7428905,
	-0.7798172, -0.7798172, -0.8141988, -0.8141988, -0.84595203, -0.84595203,
	-0.87495095, -0.87495095, -0.9011031, -0.9011031, -0.9243466, -0.9243466,
	-0.944571, -0.944571, -0.9617318, -0.9617318, -0.97578835, -0.97578835,
	-0.98664767, -0.98664767, -0.9943171, -0.9943171, -0.9987717, -0.9987717,
	-0.99995416, -0.99995416, -0.9979087, -0.9979087, -0.99262655, -0.99262655,
	-0.9841025, -0.9841025, -0.97240186, -0.97240186, -0.9575371, -0.9575371,
	-0.93955505, -0.93955505, -0.91854, -0.91854, -0.8945268, -0.8945268,
	-0.86761063, -0.86761063, -0.83789355, -0.83789355, -0.8054329, -0.8054329,
	-0.770367, -0.770367, -0.73281157, -0.73281157, -0.6928535, -0.6928535,
}
